package dev.webfx.platform.util.elemental2;

import dev.webfx.platform.meta.Meta;
import elemental2.core.JsIIterableResult;
import elemental2.core.JsIterator;
import elemental2.dom.DomGlobal;
import elemental2.dom.Event;
import elemental2.dom.ServiceWorkerContainer;

import java.util.Iterator;
import java.util.function.Consumer;

/**
 * @author Bruno Salmon
 */
public final class Elemental2Util {

    public static <T> Iterator<T> jsIteratorToJavaIterator(JsIterator<T, ?, ?> jsIterator) {
        return new Iterator<>() {
            private JsIIterableResult<T> next = jsIterator.next();

            @Override
            public boolean hasNext() {
                return !next.isDone();
            }

            @Override
            public T next() {
                T value = next.getValue();
                next = jsIterator.next();
                return value;
            }
        };
    }

    private static boolean isSafariCached, safariChecked;

    public static boolean isSafari() {
        if (!safariChecked) {
            String ua = DomGlobal.navigator.userAgent;
            // Consider Safari when UA has Safari but not Chrome/Chromium/Edge (including iOS variants)
            boolean safariLike = ua.contains("Safari");
            boolean excludeChromium = ua.contains("Chrome") || ua.contains("Chromium") || ua.contains("CriOS") || ua.contains("Edg") || ua.contains("OPR") || ua.contains("FxiOS");
            isSafariCached = safariLike && !excludeChromium;
            safariChecked = true;
        }
        return isSafariCached;
    }

    // PWA features

    private static final String PWA_SCRIPT_URL = "pwa-service-worker.js";
    private static Consumer<Boolean> promptPwaInstallReadyCallback;
    private static Consumer<Boolean> pwaInstalledCallback;
    private static Event pwaBeforeInstallPromptEvent;
    private static boolean pwaAppInstalled;

    public static String getPwaScriptUrl() { // Called by WebFX Maven plugin (pwa goal)
        return PWA_SCRIPT_URL;
    }

    public static void registerPwa() { // Called by Gwt/J2ClEntryPoint (generated by WebFX) on GWT/J2CL application startup
        boolean pwa = Meta.isPwa();
        ServiceWorkerContainer serviceWorker = DomGlobal.navigator.serviceWorker;
        if (serviceWorker == null) {
            if (pwa)
                DomGlobal.console.warn("❌ PWA service worker registration failed: not supported in this browser or context");
        } else {
            if (!pwa) {
                serviceWorker.getRegistrations()
                    .then(registrations -> {
                        registrations.forEach((registration, i) -> registration.unregister());
                        return null;
                    });
            } else {
                serviceWorker.register(PWA_SCRIPT_URL)
                    .then(registration -> {
                        DomGlobal.console.log("✅ PWA service worker registered");
                        return null;
                    })
                    .catch_(error -> {
                        DomGlobal.console.warn("❌ PWA service worker registration failed: " + error);
                        return null;
                    });
                DomGlobal.window.addEventListener("beforeinstallprompt", Elemental2Util::setPwaBeforeInstallPromptEvent);
                DomGlobal.window.addEventListener("appinstalled", Elemental2Util::setPwaAppInstalledEvent);
            }
        }
    }

    private static void setPwaBeforeInstallPromptEvent(Event event) {
        pwaBeforeInstallPromptEvent = event;
        notifyPromptPwaInstallReadyCallback();
    }

    private static void setPwaAppInstalledEvent(Event event) {
        setPwaBeforeInstallPromptEvent(null);
        pwaAppInstalled = true;
        notifyPwaInstalledCallback();
    }

    private static void notifyPromptPwaInstallReadyCallback() {
        if (promptPwaInstallReadyCallback != null)
            promptPwaInstallReadyCallback.accept(pwaBeforeInstallPromptEvent != null);
    }

    private static void notifyPwaInstalledCallback() {
        if (pwaInstalledCallback != null)
            pwaInstalledCallback.accept(pwaAppInstalled);
    }

    // Called by GwtJ2clWebFxKitLauncherProvider

    public static boolean supportsPwa() {
        return Meta.isPwa();
    }

    public static void setPromptPwaInstallReadyCallback(Consumer<Boolean> callback) {
        promptPwaInstallReadyCallback = callback;
        notifyPromptPwaInstallReadyCallback();
    }

    public static void setPwaInstalledCallback(Consumer<Boolean> callback) {
        pwaInstalledCallback = callback;
        notifyPwaInstalledCallback();
    }

    public static void promptPwaInstall() {
        if (pwaBeforeInstallPromptEvent != null)
            promptInstallPWA(pwaBeforeInstallPromptEvent);
    }

    public static boolean isRunningAsPWA() {
        return DomGlobal.window.matchMedia("(display-mode: standalone)").matches ||
               DomGlobal.window.matchMedia("(display-mode: fullscreen)").matches ||
               DomGlobal.window.matchMedia("(display-mode: minimal-ui)").matches ||
               isNavigatorStandalone(); // iOS Safari
    }

    // JNI methods (not yet supported in Elemental2) TODO: replace with Elemental2 when available

    private static native void promptInstallPWA(Event e) /*-{
        e.prompt();
    }-*/;

    private static native boolean isNavigatorStandalone() /*-{
        return navigator.standalone === true;
    }-*/;

}

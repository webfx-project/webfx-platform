
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dev.webfx.platform.ast.yaml.parser.javacup;

import dev.webfx.platform.ast.AST;
import dev.webfx.platform.ast.AstArray;
import dev.webfx.platform.ast.AstObject;
import dev.webfx.platform.util.tuples.Pair;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCupYamlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YamlSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCupYamlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCupYamlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCupYamlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\002\004\000\002\002\005\000\002\002\004" +
    "\000\002\002\004\000\002\002\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\004\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\013\004\000\002\014\005\000\002\014\004" +
    "\000\002\015\005\000\002\015\003\000\002\017\003\000" +
    "\002\017\003\000\002\016\004\000\002\016\004\000\002" +
    "\020\005\000\002\020\003\000\002\021\004\000\002\021" +
    "\003\000\002\022\005\000\002\022\004\000\002\023\004" +
    "\000\002\024\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\025\005\000\002" +
    "\026\004\000\002\026\003\000\002\027\006\000\002\027" +
    "\007\000\002\027\010\000\002\030\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\020\002\000\004\020\006\021\010\015\022" +
    "\007\024\005\025\004\001\002\000\024\014\062\015\064" +
    "\016\042\017\040\020\073\021\041\022\076\023\037\024" +
    "\005\001\002\000\004\012\uffee\001\002\000\020\002\uffed" +
    "\005\uffed\007\uffed\011\uffed\013\uffed\026\uffed\027\uffed\001" +
    "\002\000\004\012\uffef\001\002\000\006\002\ufff6\005\ufff6" +
    "\001\002\000\010\002\uffda\005\uffda\026\116\001\002\000" +
    "\006\002\ufff7\005\ufff7\001\002\000\006\002\uffdf\005\uffdf" +
    "\001\002\000\004\012\061\001\002\000\022\006\021\010" +
    "\015\011\054\016\042\017\040\021\041\022\044\023\037" +
    "\001\002\000\006\002\uffde\005\uffde\001\002\000\020\002" +
    "\uffec\005\uffec\007\uffec\011\uffec\013\uffec\026\uffec\027\uffec" +
    "\001\002\000\020\002\uffff\005\050\006\021\010\015\022" +
    "\007\024\005\025\004\001\002\000\010\007\032\022\007" +
    "\024\005\001\002\000\012\002\uffd8\005\uffd8\026\uffd8\027" +
    "\uffd8\001\002\000\004\002\026\001\002\000\006\002\ufffa" +
    "\005\025\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\001\001\002\000\004\012\036\001\002\000\006\007\034" +
    "\013\033\001\002\000\006\007\uffe6\013\uffe6\001\002\000" +
    "\020\002\uffe8\005\uffe8\007\uffe8\011\uffe8\013\uffe8\026\uffe8" +
    "\027\uffe8\001\002\000\006\022\007\024\005\001\002\000" +
    "\020\002\uffe9\005\uffe9\007\uffe9\011\uffe9\013\uffe9\026\uffe9" +
    "\027\uffe9\001\002\000\006\007\uffe7\013\uffe7\001\002\000" +
    "\024\006\021\007\uffe4\010\015\013\uffe4\016\042\017\040" +
    "\021\041\022\044\023\037\001\002\000\020\002\ufff0\005" +
    "\ufff0\007\ufff0\011\ufff0\013\ufff0\026\ufff0\027\ufff0\001\002" +
    "\000\020\002\ufff5\005\ufff5\007\ufff5\011\ufff5\013\ufff5\026" +
    "\ufff5\027\ufff5\001\002\000\020\002\ufff4\005\ufff4\007\ufff4" +
    "\011\ufff4\013\ufff4\026\ufff4\027\ufff4\001\002\000\020\002" +
    "\ufff3\005\ufff3\007\ufff3\011\ufff3\013\ufff3\026\ufff3\027\ufff3" +
    "\001\002\000\020\002\uffeb\005\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\026\uffeb\027\uffeb\001\002\000\020\002\ufff1\005\ufff1" +
    "\007\ufff1\011\ufff1\013\ufff1\026\ufff1\027\ufff1\001\002\000" +
    "\006\007\uffe5\013\uffe5\001\002\000\020\002\uffea\005\uffea" +
    "\007\uffea\011\uffea\013\uffea\026\uffea\027\uffea\001\002\000" +
    "\020\002\ufff2\005\ufff2\007\ufff2\011\ufff2\013\ufff2\026\ufff2" +
    "\027\ufff2\001\002\000\004\002\ufffe\001\002\000\006\002" +
    "\ufffc\005\052\001\002\000\004\002\ufffd\001\002\000\006" +
    "\011\uffe0\013\uffe0\001\002\000\020\002\uffe2\005\uffe2\007" +
    "\uffe2\011\uffe2\013\uffe2\026\uffe2\027\uffe2\001\002\000\006" +
    "\011\056\013\057\001\002\000\020\002\uffe3\005\uffe3\007" +
    "\uffe3\011\uffe3\013\uffe3\026\uffe3\027\uffe3\001\002\000\020" +
    "\006\021\010\015\016\042\017\040\021\041\022\044\023" +
    "\037\001\002\000\006\011\uffe1\013\uffe1\001\002\000\036" +
    "\002\uffd6\005\uffd6\006\021\010\015\014\062\015\064\016" +
    "\042\017\040\021\041\022\044\023\037\025\063\026\uffd6" +
    "\027\uffd6\001\002\000\004\023\125\001\002\000\032\006" +
    "\021\010\015\014\062\015\064\016\042\017\040\020\073" +
    "\021\041\022\076\023\037\024\005\025\063\001\002\000" +
    "\004\023\070\001\002\000\012\002\uffd4\005\uffd4\026\uffd4" +
    "\027\uffd4\001\002\000\012\002\uffd3\005\uffd3\026\uffd3\027" +
    "\uffd3\001\002\000\012\002\uffd7\005\uffd7\026\uffd7\027\uffd7" +
    "\001\002\000\012\002\uffdc\005\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\006\026\116\027\124\001\002\000\006\026\122" +
    "\027\120\001\002\000\004\025\100\001\002\000\004\027" +
    "\077\001\002\000\006\026\uffcd\027\uffcd\001\002\000\006" +
    "\012\uffef\027\ufff1\001\002\000\012\002\uffd0\005\uffd0\026" +
    "\uffd0\027\uffd0\001\002\000\032\006\021\010\015\014\062" +
    "\015\064\016\042\017\040\021\041\022\076\023\037\024" +
    "\005\025\102\026\103\001\002\000\006\026\116\027\uffc6" +
    "\001\002\000\026\006\021\010\015\014\062\015\064\016" +
    "\042\017\040\021\041\022\076\023\037\024\005\001\002" +
    "\000\026\006\021\010\015\014\062\015\064\016\042\017" +
    "\040\021\041\022\076\023\037\024\005\001\002\000\004" +
    "\027\uffc8\001\002\000\004\027\107\001\002\000\004\027" +
    "\uffc7\001\002\000\006\026\uffcc\027\uffcc\001\002\000\004" +
    "\027\111\001\002\000\006\026\uffcb\027\uffcb\001\002\000" +
    "\004\027\113\001\002\000\004\027\114\001\002\000\006" +
    "\026\uffca\027\uffca\001\002\000\012\002\uffd9\005\uffd9\026" +
    "\uffd9\027\uffd9\001\002\000\006\022\007\024\005\001\002" +
    "\000\012\002\uffd5\005\uffd5\026\uffd5\027\uffd5\001\002\000" +
    "\012\002\uffd1\005\uffd1\026\uffd1\027\uffd1\001\002\000\006" +
    "\026\uffce\027\uffce\001\002\000\004\020\073\001\002\000" +
    "\006\026\uffc9\027\uffc9\001\002\000\012\002\uffd2\005\uffd2" +
    "\026\uffd2\027\uffd2\001\002\000\012\002\uffdd\005\uffdd\026" +
    "\uffdd\027\uffdd\001\002\000\004\027\135\001\002\000\006" +
    "\026\122\027\134\001\002\000\006\026\116\027\133\001" +
    "\002\000\004\027\132\001\002\000\006\002\ufff8\005\ufff8" +
    "\001\002\000\006\002\uffdb\005\uffdb\001\002\000\006\002" +
    "\uffcf\005\uffcf\001\002\000\006\002\ufff9\005\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\030\002\022\003\023\006\013\007\011\011" +
    "\005\014\016\017\007\020\012\021\010\022\021\025\015" +
    "\001\001\000\022\004\125\005\046\006\013\016\130\021" +
    "\127\022\021\026\126\027\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\042\005\046\007\045\010" +
    "\052\011\005\014\016\015\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\050\006\013\007\011\011" +
    "\005\014\016\017\007\020\012\021\010\022\021\025\015" +
    "\001\001\000\010\006\026\012\027\013\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\026" +
    "\013\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\042\005\046\007\045\010\044\011\005\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\042\005\046\007\045\010\057\011\005" +
    "\014\016\001\001\000\002\001\001\000\022\004\042\005" +
    "\046\007\045\010\064\011\005\014\016\016\065\024\066" +
    "\001\001\000\002\001\001\000\034\004\042\005\046\006" +
    "\013\007\045\010\064\011\005\014\016\016\065\021\070" +
    "\022\021\024\073\026\071\027\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\114\001\001\000\004\030" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\042\005\046\006\013\007\045\010\103\011\005\014\016" +
    "\016\105\021\100\022\021\031\104\001\001\000\004\023" +
    "\114\001\001\000\030\004\042\005\046\006\013\007\045" +
    "\010\103\011\005\014\016\016\105\021\100\022\021\031" +
    "\111\001\001\000\030\004\042\005\046\006\013\007\045" +
    "\010\103\011\005\014\016\016\105\021\100\022\021\031" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\013\022\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\120\001\001" +
    "\000\004\023\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCupYamlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCupYamlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCupYamlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        System.err.println(generateErrorMessage(message, info));
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        throw new IllegalArgumentException(generateErrorMessage(message, info));
    }

    private String generateErrorMessage(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        return m.toString();
    }

    private MultipleSymbol multipleSymbol;
    private Symbol pushbackSymbol;

    public Symbol scan() throws Exception {
        Symbol symbol = scanImpl();
        // Uncomment for debug
        // System.out.println("-".repeat(((dev.webfx.platform.ast.yaml.parser.jflex.YamlLexer) getScanner()).indentCounter.openIndentCount()) +  "> Symbol " + YamlSymbols.terminalNames[symbol.sym] + (symbol.value == null ? "" : "(" + symbol.value + ")"));
        return symbol;
    }

    private Symbol scanImpl() throws Exception {
        Symbol symbol = pushbackSymbol;
        if (symbol != null) {
            pushbackSymbol = null;
        } else {
            if (multipleSymbol == null) {
                symbol = super.scan();
                if (symbol instanceof MultipleSymbol)
                    multipleSymbol = (MultipleSymbol) symbol;
            }
            if (multipleSymbol != null) {
                symbol = multipleSymbol.nextSymbol();
                if (symbol == null) {
                    multipleSymbol = null;
                    symbol = scanImpl();
                }
            }
        }
        while (symbol.sym == YamlSymbols.INDENT_OPEN) {
            Symbol nextSymbol = scanImpl();
            if (nextSymbol.sym != YamlSymbols.INDENT_CLOSE) {
                pushbackSymbol = nextSymbol;
                break;
            }
            symbol = scanImpl();
        }
        return symbol;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCupYamlParser$actions {
  private final JavaCupYamlParser parser;

  /** Constructor */
  CUP$JavaCupYamlParser$actions(JavaCupYamlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCupYamlParser$do_action_part00000000(
    int                        CUP$JavaCupYamlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupYamlParser$parser,
    java.util.Stack            CUP$JavaCupYamlParser$stack,
    int                        CUP$JavaCupYamlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCupYamlParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCupYamlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= yaml_document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCupYamlParser$parser.done_parsing();
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // yaml_document ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // yaml_document ::= DOCSTART 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // yaml_document ::= DOCSTART DOCEND 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // yaml_document ::= DOCSTART yaml_root_element DOCEND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // yaml_document ::= DOCSTART yaml_root_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // yaml_document ::= yaml_root_element DOCEND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // yaml_document ::= yaml_root_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // yaml_root_element ::= INDENT_OPEN yaml_global_scalar INDENT_CLOSE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_root_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaml_root_element ::= INDENT_OPEN yaml_indent_additionalstring INDENT_CLOSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_root_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaml_root_element ::= yaml_json_node 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_root_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaml_root_element ::= yaml_indent_node 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_root_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaml_global_scalar ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // yaml_global_scalar ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // yaml_global_scalar ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // yaml_global_scalar ::= yaml_global_string 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // yaml_global_string ::= QUOTED_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_string",3, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // yaml_global_string ::= UNQUOTED_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = YamlCupUnquotedStrings.format(s); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_string",3, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // yaml_global_key ::= QUOTED_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_key",4, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // yaml_global_key ::= UNQUOTED_KEY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_global_key",4, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // yaml_json_node ::= yaml_json_object 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_node",5, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // yaml_json_node ::= yaml_json_array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_node",5, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // yaml_json_element ::= yaml_global_scalar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_element",6, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // yaml_json_element ::= yaml_json_node 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = n ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_element",6, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // yaml_json_object ::= LCURLY yaml_json_object_body RCURLY 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = o ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object",7, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // yaml_json_object ::= LCURLY RCURLY 
            {
              AstObject RESULT =null;
		 RESULT =  AST.createObject() ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object",7, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // yaml_json_object_body ::= yaml_json_object_body COMMA yaml_json_object_entry 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o.set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object_body",8, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // yaml_json_object_body ::= yaml_json_object_entry 
            {
              AstObject RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT =  AST.createObject().set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object_body",8, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // yaml_json_object_entry ::= yaml_global_key COLON yaml_json_element 
            {
              Pair<String,Object> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = new Pair(key, e) ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object_entry",9, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // yaml_json_object_entry ::= yaml_global_key COLON 
            {
              Pair<String,Object> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = new Pair(key, null) ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_object_entry",9, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // yaml_json_array ::= LBRACK yaml_json_array_body RBRACK 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = a ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_array",10, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // yaml_json_array ::= LBRACK RBRACK 
            {
              AstArray RESULT =null;
		 RESULT = AST.createArray() ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_array",10, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // yaml_json_array_body ::= yaml_json_array_body COMMA yaml_json_element 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a.push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_array_body",11, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // yaml_json_array_body ::= yaml_json_element 
            {
              AstArray RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = AST.createArray().push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_json_array_body",11, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // yaml_indent_node ::= yaml_indent_object 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_node",13, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // yaml_indent_node ::= yaml_indent_array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_node",13, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // yaml_indent_additionalstring ::= PIPE UNQUOTED_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = YamlCupUnquotedStrings.formatPipe(s); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_additionalstring",12, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // yaml_indent_additionalstring ::= GREATER_THAN UNQUOTED_STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = YamlCupUnquotedStrings.formatFolded(s); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_additionalstring",12, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // yaml_indent_object ::= INDENT_OPEN yaml_indent_object_body INDENT_CLOSE 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = o ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object",14, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // yaml_indent_object ::= yaml_indent_object_body 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object",14, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // yaml_indent_object_body ::= yaml_indent_object_body yaml_indent_object_subsequent_entry 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o.set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_body",15, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // yaml_indent_object_body ::= yaml_indent_object_first_entry 
            {
              AstObject RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT =  AST.createObject().set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_body",15, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // yaml_indent_object_first_entry ::= yaml_global_key COLON yaml_indent_object_entry_element 
            {
              Pair<String,Object> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = new Pair(key, e) ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_first_entry",16, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // yaml_indent_object_first_entry ::= yaml_global_key COLON 
            {
              Pair<String,Object> RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = new Pair(key, null) ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_first_entry",16, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // yaml_indent_object_subsequent_entry ::= INDENT_SAME yaml_indent_object_first_entry 
            {
              Pair<String,Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_subsequent_entry",17, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // yaml_indent_object_entry_element ::= yaml_json_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_entry_element",18, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // yaml_indent_object_entry_element ::= yaml_indent_additionalstring 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_entry_element",18, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // yaml_indent_object_entry_element ::= INDENT_OPEN yaml_indent_object_body INDENT_CLOSE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_entry_element",18, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // yaml_indent_object_entry_element ::= INDENT_OPEN yaml_indent_array_body INDENT_CLOSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = a; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_entry_element",18, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // yaml_indent_object_entry_element ::= INDENT_OPEN yaml_indent_object_entry_element INDENT_CLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_object_entry_element",18, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // yaml_indent_array ::= INDENT_OPEN yaml_indent_array_body INDENT_CLOSE 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = a; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array",19, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // yaml_indent_array_body ::= yaml_indent_array_body yaml_indent_array_subsequent_element 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a.push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_body",20, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // yaml_indent_array_body ::= yaml_indent_array_first_element 
            {
              AstArray RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = AST.createArray().push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_body",20, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // yaml_indent_array_first_element ::= DASH_ARRAY INDENT_OPEN yaml_indent_array_value_element INDENT_CLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_first_element",21, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // yaml_indent_array_first_element ::= DASH_ARRAY INDENT_OPEN INDENT_SAME yaml_indent_array_value_element INDENT_CLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_first_element",21, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // yaml_indent_array_first_element ::= DASH_ARRAY INDENT_OPEN INDENT_OPEN yaml_indent_array_value_element INDENT_CLOSE INDENT_CLOSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_first_element",21, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // yaml_indent_array_subsequent_element ::= INDENT_SAME yaml_indent_array_first_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_subsequent_element",22, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaml_indent_array_value_element ::= yaml_json_element 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_value_element",23, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaml_indent_array_value_element ::= yaml_indent_additionalstring 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_value_element",23, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaml_indent_array_value_element ::= yaml_indent_object_body 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_indent_array_value_element",23, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCupYamlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCupYamlParser$do_action(
    int                        CUP$JavaCupYamlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupYamlParser$parser,
    java.util.Stack            CUP$JavaCupYamlParser$stack,
    int                        CUP$JavaCupYamlParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCupYamlParser$do_action_part00000000(
                               CUP$JavaCupYamlParser$act_num,
                               CUP$JavaCupYamlParser$parser,
                               CUP$JavaCupYamlParser$stack,
                               CUP$JavaCupYamlParser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dev.webfx.platform.ast.toml.parser.javacup;

import dev.webfx.platform.ast.AST;
import dev.webfx.platform.ast.AstArray;
import dev.webfx.platform.ast.AstObject;
import dev.webfx.platform.ast.ReadOnlyAstArray;
import dev.webfx.platform.util.Numbers;
import dev.webfx.platform.util.tuples.Pair;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.LocalDateTime;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCupTomlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TomlSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCupTomlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCupTomlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCupTomlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\003\000\002\007" +
    "\003\000\002\007\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\003\000" +
    "\002\012\004\000\002\012\003\000\002\014\004\000\002" +
    "\014\003\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\013\005\000\002\015\003\000\002\015\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\005\004" +
    "\000\002\006\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\012\002\ufffe\004\014\015\007\016\013\001" +
    "\002\000\016\002\ufff5\004\ufff5\005\ufff5\007\ufff5\015\007" +
    "\016\013\001\002\000\016\002\ufffc\004\014\005\ufffc\007" +
    "\ufffc\015\ufffc\016\ufffc\001\002\000\004\002\055\001\002" +
    "\000\004\010\uffef\001\002\000\004\010\030\001\002\000" +
    "\016\002\ufff7\004\ufff7\005\ufff7\007\ufff7\015\ufff7\016\ufff7" +
    "\001\002\000\016\002\uffff\004\uffff\005\uffff\007\uffff\015" +
    "\uffff\016\uffff\001\002\000\004\010\ufff0\001\002\000\004" +
    "\016\023\001\002\000\016\002\ufff9\004\ufff9\005\ufff9\007" +
    "\ufff9\015\ufff9\016\ufff9\001\002\000\004\002\000\001\002" +
    "\000\016\002\ufffd\004\014\005\ufffd\007\ufffd\015\007\016" +
    "\013\001\002\000\016\002\ufffb\004\014\005\ufffb\007\ufffb" +
    "\015\ufffb\016\ufffb\001\002\000\016\002\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\015\ufffa\016\ufffa\001\002\000\016\002\ufff8" +
    "\004\ufff8\005\ufff8\007\ufff8\015\ufff8\016\ufff8\001\002\000" +
    "\006\005\ufff3\006\ufff3\001\002\000\006\005\025\006\026" +
    "\001\002\000\016\002\ufff4\004\ufff4\005\ufff4\007\ufff4\015" +
    "\ufff4\016\ufff4\001\002\000\004\016\027\001\002\000\006" +
    "\005\ufff2\006\ufff2\001\002\000\034\002\ufffe\004\033\005" +
    "\ufffe\007\ufffe\011\045\012\044\013\040\014\036\015\037" +
    "\016\013\017\031\020\032\021\041\001\002\000\016\002" +
    "\uffe6\004\uffe6\005\uffe6\007\uffe6\015\uffe6\016\uffe6\001\002" +
    "\000\016\002\uffe5\004\uffe5\005\uffe5\007\uffe5\015\uffe5\016" +
    "\uffe5\001\002\000\032\004\033\005\046\007\ufffe\011\045" +
    "\012\044\013\040\014\036\015\037\016\047\017\031\020" +
    "\032\021\041\001\002\000\016\002\uffec\004\uffec\005\uffec" +
    "\007\uffec\015\uffec\016\uffec\001\002\000\016\002\uffee\004" +
    "\uffee\005\uffee\007\uffee\015\uffee\016\uffee\001\002\000\016" +
    "\002\uffe8\004\uffe8\005\uffe8\007\uffe8\015\uffe8\016\uffe8\001" +
    "\002\000\020\002\uffe9\004\uffe9\005\uffe9\007\uffe9\010\uffef" +
    "\015\uffe9\016\uffe9\001\002\000\016\002\uffea\004\uffea\005" +
    "\uffea\007\uffea\015\uffea\016\uffea\001\002\000\016\002\uffe4" +
    "\004\uffe4\005\uffe4\007\uffe4\015\uffe4\016\uffe4\001\002\000" +
    "\016\002\uffed\004\uffed\005\uffed\007\uffed\015\uffed\016\uffed" +
    "\001\002\000\016\002\ufff1\004\ufff1\005\ufff1\007\ufff1\015" +
    "\ufff1\016\ufff1\001\002\000\016\002\uffeb\004\uffeb\005\uffeb" +
    "\007\uffeb\015\uffeb\016\uffeb\001\002\000\016\002\uffe7\004" +
    "\uffe7\005\uffe7\007\uffe7\015\uffe7\016\uffe7\001\002\000\016" +
    "\002\uffe2\004\uffe2\005\uffe2\007\uffe2\015\uffe2\016\uffe2\001" +
    "\002\000\010\005\ufff3\006\ufff3\010\ufff0\001\002\000\006" +
    "\005\052\007\053\001\002\000\006\005\uffe1\007\uffe1\001" +
    "\002\000\016\002\uffe3\004\uffe3\005\uffe3\007\uffe3\015\uffe3" +
    "\016\uffe3\001\002\000\032\004\033\005\ufffe\007\ufffe\011" +
    "\045\012\044\013\040\014\036\015\037\016\013\017\031" +
    "\020\032\021\041\001\002\000\006\005\uffe0\007\uffe0\001" +
    "\002\000\004\002\001\001\002\000\016\002\ufff6\004\ufff6" +
    "\005\ufff6\007\ufff6\015\007\016\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\024\002\005\007\015\010\011\011\016\012" +
    "\004\013\014\014\010\015\007\016\003\001\001\000\010" +
    "\011\055\013\014\015\007\001\001\000\006\014\021\016" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\017\013\020\014\010\015\007\016" +
    "\003\001\001\000\006\014\021\016\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\042\004\034\005\041\007\033\010\011\011" +
    "\016\012\004\013\014\014\010\015\007\016\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\050\004" +
    "\034\005\041\006\047\007\033\010\011\011\016\012\004" +
    "\013\014\014\010\015\007\016\003\017\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\053\004\034" +
    "\005\041\007\033\010\011\011\016\012\004\013\014\014" +
    "\010\015\007\016\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\020\015\007\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCupTomlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCupTomlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCupTomlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        System.err.println(generateErrorMessage(message, info));
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        throw new IllegalArgumentException(generateErrorMessage(message, info));
    }

    private String generateErrorMessage(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        return m.toString();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCupTomlParser$actions {
  private final JavaCupTomlParser parser;

  /** Constructor */
  CUP$JavaCupTomlParser$actions(JavaCupTomlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCupTomlParser$do_action_part00000000(
    int                        CUP$JavaCupTomlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupTomlParser$parser,
    java.util.Stack            CUP$JavaCupTomlParser$stack,
    int                        CUP$JavaCupTomlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCupTomlParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCupTomlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= toml_document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCupTomlParser$parser.done_parsing();
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // toml_document ::= toml_object 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_document",0, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // toml_object ::= toml_object_body 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_object",5, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // toml_object ::= 
            {
              AstObject RESULT =null;
		 RESULT = AST.createObject(); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_object",5, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // toml_object_body ::= toml_key_value_list 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_object_body",6, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // toml_object_body ::= toml_section_list 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_object_body",6, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // toml_object_body ::= toml_key_value_list toml_section_list 
            {
              AstObject RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		AstObject o1 = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o2 = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 // Merge the two objects
                 ReadOnlyAstArray keys = o2.keys();
                 for (int i = 0; i < keys.size(); i++) {
                     String key = keys.getString(i);
                     o1.set(key, (Object) o2.get(key));
                 }
                 RESULT = o1;
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_object_body",6, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // toml_key_value_list ::= toml_key_value_list toml_key_value 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		int kvleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int kvright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Pair<String,Object> kv = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o.set(kv.get1(), kv.get2()); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_key_value_list",7, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // toml_key_value_list ::= toml_key_value 
            {
              AstObject RESULT =null;
		int kvleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int kvright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Pair<String,Object> kv = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = AST.createObject().set(kv.get1(), kv.get2()); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_key_value_list",7, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // toml_section_list ::= toml_section_list toml_section_item 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Pair<String,AstObject> si = (Pair<String,AstObject>)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 // Merge the section item into the object
                 String section = si.get1();
                 AstObject sectionObj = (AstObject) si.get2();

                 String[] parts = section.split("\\.");
                 AstObject current = o;
                 for (int i = 0; i < parts.length - 1; i++) {
                     String part = parts[i];
                     if (!current.has(part)) {
                         current.set(part, AST.createObject());
                     }
                     current = (AstObject) current.get(part);
                 }
                 String lastPart = parts[parts.length - 1];
                 current.set(lastPart, sectionObj);
                 RESULT = o;
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_list",8, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // toml_section_list ::= toml_section_item 
            {
              AstObject RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Pair<String,AstObject> si = (Pair<String,AstObject>)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 // Create a new object with the section as the key
                 String section = si.get1();
                 AstObject sectionObj = (AstObject) si.get2();

                 AstObject result = AST.createObject();
                 String[] parts = section.split("\\.");
                 AstObject current = result;
                 for (int i = 0; i < parts.length - 1; i++) {
                     String part = parts[i];
                     current.set(part, AST.createObject());
                     current = (AstObject) current.get(part);
                 }
                 String lastPart = parts[parts.length - 1];
                 current.set(lastPart, sectionObj);
                 RESULT = result;
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_list",8, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // toml_section_item ::= toml_section toml_key_value_list 
            {
              Pair<String,AstObject> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = new Pair(s, o); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_item",10, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // toml_section_item ::= toml_section 
            {
              Pair<String,AstObject> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = new Pair(s, AST.createObject()); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_item",10, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // toml_section ::= LBRACK toml_section_name RBRACK 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		 RESULT = s; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section",12, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // toml_section_name ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = id; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_name",13, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // toml_section_name ::= toml_section_name DOT IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = s + "." + id; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_section_name",13, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // toml_key_value ::= toml_key EQUALS toml_element 
            {
              Pair<String,Object> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = new Pair(k, e); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_key_value",9, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // toml_key ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = id; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_key",11, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // toml_key ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_key",11, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // toml_element ::= toml_scalar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // toml_element ::= toml_array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // toml_element ::= toml_object 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_element",1, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // toml_scalar ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // toml_scalar ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = f; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // toml_scalar ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // toml_scalar ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // toml_scalar ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // toml_scalar ::= DATETIME 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 try {
                     if (dt.endsWith("Z") || dt.contains("+") || dt.contains("-")) {
                         RESULT = Instant.parse(dt);
                     } else {
                         RESULT = LocalDateTime.parse(dt);
                     }
                 } catch (Exception e) {
                     RESULT = dt; // Fallback to string if parsing fails
                 }
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // toml_scalar ::= DATE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 try {
                     RESULT = LocalDate.parse(d);
                 } catch (Exception e) {
                     RESULT = d; // Fallback to string if parsing fails
                 }
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // toml_scalar ::= TIME 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 
                 try {
                     RESULT = LocalTime.parse(t);
                 } catch (Exception e) {
                     RESULT = t; // Fallback to string if parsing fails
                 }
              
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // toml_array ::= LBRACK toml_array_body RBRACK 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)).value;
		 RESULT = a; 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_array",3, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // toml_array ::= LBRACK RBRACK 
            {
              AstArray RESULT =null;
		 RESULT = AST.createArray(); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_array",3, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // toml_array_body ::= toml_element 
            {
              AstArray RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = AST.createArray().push(e); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_array_body",4, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // toml_array_body ::= toml_array_body COMMA toml_element 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupTomlParser$stack.peek()).value;
		 RESULT = a.push(e); 
              CUP$JavaCupTomlParser$result = parser.getSymbolFactory().newSymbol("toml_array_body",4, ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.elementAt(CUP$JavaCupTomlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupTomlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupTomlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCupTomlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCupTomlParser$do_action(
    int                        CUP$JavaCupTomlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupTomlParser$parser,
    java.util.Stack            CUP$JavaCupTomlParser$stack,
    int                        CUP$JavaCupTomlParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCupTomlParser$do_action_part00000000(
                               CUP$JavaCupTomlParser$act_num,
                               CUP$JavaCupTomlParser$parser,
                               CUP$JavaCupTomlParser$stack,
                               CUP$JavaCupTomlParser$top);
    }
}

}
